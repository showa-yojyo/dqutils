# pyproject.toml
#
# TEMPLATE: <https://github.com/pypa/sampleproject/blob/main/pyproject.toml>

# Guide (user-friendly):
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

# Specification (technical, formal):
# https://packaging.python.org/en/latest/specifications/pyproject-toml/


[project]

# There are some restrictions on what makes a valid project name specification
# here: https://packaging.python.org/specifications/core-metadata/#name
name = "dqutils"

# Versions should comply with PEP 440: https://www.python.org/dev/peps/pep-0440/
#
# For a discussion on single-sourcing the version, see
# https://packaging.python.org/guides/single-sourcing-package-version/
# version = "1.1.2"
dynamic = ["version"]

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary
description = "Python modules to extract text data in SNES ROM images of DRAGONQUEST series (only for 5, 6, and 3)."

# This is an optional longer description of your project that represents the
# body of text which users will see when they visit PyPI.
#
# Often, this is the same as your README, so you can just read it in from that
# file directly.
#
# This field corresponds to the "Description" metadata field:
# https://packaging.python.org/specifications/core-metadata/#description-optional
readme = "README.md"

# Specify which Python versions you support. In contrast to the 'Programming
# Language' classifiers in this file, 'pip install' will check this and refuse
# to install the project if the version does not match. See
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
requires-python = ">=3.12"

# This is either text indicating the license for the distribution, or a file
# that contains the license.
# https://packaging.python.org/en/latest/specifications/core-metadata/#license
license = {file = "LICENSE"}

# This field adds keywords for your project which will appear on the project
# page. What does your project relate to?
#
# Note that this is a list of additional keywords, separated by commas, to be
# used to assist searching for the distribution in a larger catalog.
keywords = []

# This should be your name or the name of the organization who originally
# authored the project, and a valid email address corresponding to the name
# listed.
authors = [
    { name="プレハブ小屋", email="yojyo@hotmail.com" },
]

# This should be your name or the names of the organization who currently
# maintains the project, and a valid email address corresponding to the name
# listed.
maintainers = [
    { name="プレハブ小屋", email="yojyo@hotmail.com" },
]

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [
    # Specify the Python versions you support here. In particular, ensure that
    # you indicate you support Python 3. These classifiers are *not* checked by
    # "pip install". See instead "requires-python" key in this file.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",

    # Pick your license as you wish
    "License :: OSI Approved :: MIT License",

    # ????
    "Operating System :: OS Independent",
]

# This field lists other packages that your project depends on to run. Any
# package you put here will be installed by pip when your project is installed,
# so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [
    "pipenv"
]

# List additional groups of dependencies here (e.g. development dependencies).
# Users will be able to install these using the "extras" syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Optional dependencies the project provides. These are commonly referred to as
# "extras". For a more extensive definition see:
# https://packaging.python.org/en/latest/specifications/dependency-specifiers/#extras
[project.optional-dependencies]
dev = []
test = []

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is what's
# used to render the link text on PyPI.
[project.urls]
Homepage = "https://github.com/showa-yojyo/dqutils/"
Issues = "https://github.com/showa-yojyo/dqutils/issues"
Source = "https://github.com/showa-yojyo/dqutils/"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
# [project.scripts]
# sample = "sample:main"

# Choosing a build backend:
# https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-a-build-backend
[build-system]

# A list of packages that are needed to build your package:
requires = ["hatchling"]

# The name of the Python object that frontends will use to perform the build:
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/dqutils/release.py"

[tool.ruff.lint]
ignore = [
    "PT009",  # pytest-unittest-assertion
    "PT027",  # pytest-unittest-raises-assertion
    "S101",  # assert
]
